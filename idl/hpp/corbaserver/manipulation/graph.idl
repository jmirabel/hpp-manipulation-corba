// Copyright (c) 2014, LAAS-CNRS
// Authors: Joseph Mirabel (joseph.mirabel@laas.fr)
//
// This file is part of hpp-manipulation.
// hpp-manipulation is free software: you can redistribute it
// and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation, either version
// 3 of the License, or (at your option) any later version.
//
// hpp-manipulation is distributed in the hope that it will be
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Lesser Public License for more details.  You should have
// received a copy of the GNU Lesser General Public License along with
// hpp-manipulation. If not, see <http://www.gnu.org/licenses/>.


#ifndef HPP_MANIPULATION_CORBA_GRAPH_IDL
# define HPP_MANIPULATION_CORBA_GRAPH_IDL

# include "hpp/corbaserver/manipulation/gcommon.idl"
# include <hpp/corbaserver/common.idl>

module hpp {
  module corbaserver {
    module manipulation {
      typedef sequence <Names_t> Namess_t;

      /// Describe a rule to link or not, a gripper and a handle.
      struct Rule {
	string gripper;
	string handle;
	boolean link;
      };
      typedef sequence<Rule> Rules;

      interface Graph {
        /// Initialize the graph of constraints.
        /// \note The composite hpp::manipulation::robot must be completely defined first.
        long createGraph(in string graphName)
          raises (Error);

        /// Create a subgraph of the constraint graph for one particular end-effector.
        long createSubGraph(in string subgraphName)
          raises (Error);

        void setTargetNodeList(in ID subgraph, in IDseq nodes)
          raises (Error);

        /// Add a node to the graph.
        /// \param subGraphId is the ID of the subgraph to which the node should be added.
        /// \param nodeName the name of the new node.
        /// \param waypoint true when the node is a waypoint
        long createNode (in long subGraphId, in string nodeName, in boolean waypoint)
          raises (Error);

        /// Add an edge between two nodes of the graph.
        /// \param nodeFromId, nodeToId the ID of the ends of the new edge.
        /// \param edgeName name of the new edge.
        /// \param weight weight of the edge.
        long createEdge (in long nodeFromId, in long nodeToId, in string edgeName, in long weight, in boolean isInNodeFrom)
          raises (Error);

        /// Set in which node an edge is.
        /// \param edgeId the ID of the edge,
        /// \param isInNodeFrom whether or not a path corresponding to this edge is in the node from.
        /// \note A finer control of the containing node can be achieve with
        ///       setContainingNode
        /// \deprecated
        void isInNodeFrom (in long edgeId, in boolean isInNodeFrom)
          raises (Error);

        /// Set in which node an edge is.
        /// \param edgeId the ID of the edge,
        /// \param nodeId the ID of the node in which the edge is.
        void setContainingNode (in ID edgeId, in ID nodeId)
          raises (Error);

        /// Add an edge with waypoint between two nodes of the graph.
        /// \param nodeFromId, nodeToId the ID of the ends of the new edge.
        /// \param edgeBaseName basename of the new edge.
        /// \param weight weight of the edge.
        long createWaypointEdge (in long nodeFromId, in long nodeToId, in string edgeName,
            in long number, in long weight, in boolean isInNodeFrom)
          raises (Error);

        /// Get waypoint IDs of an edge.
        /// \param edgeId the ID of the edge.
        /// \param index index of the waypoint.
        /// \return the ID of the edge and the node associated with the node.
        long getWaypoint (in long edgeId, in long index, out ID nodeId)
          raises (Error);

        void setWaypoint (in ID waypointEdgeId, in long index,
            in ID edgeId, in ID nodeId)
          raises (Error);

        /// Get full graph
        /// \return a structure with all the IDs and names
        void getGraph (out GraphComp graph, out GraphElements elmts)
          raises (Error);

        void getEdgeStat (in ID edgeId, out Names_t reasons, out intSeq freqs)
          raises (Error);

        /// Get config projector statistics
        /// \param output config, path object containing the number of success
        ///                       and the number of times a config projector has
        ///                       been called.
        /// \return true if the given has a config projector, false otherwise
        boolean getConfigProjectorStats (in ID elmt, out ConfigProjStat config, out ConfigProjStat path)
          raises (Error);

        /// Add an edge of type LevelSetEdge between two nodes.
        /// \param nodeFromId, nodeToId the ID of the ends of the new edge.
        /// \param edgeName name of the new edge.
        /// \param weight weight of the edge.
        long createLevelSetEdge(in long nodeFromId, in long nodeToId, in string edgeName, in long weight, in boolean isInNodeFrom)
          raises (Error);

        /// Set the constraints of a LevelSetEdge that create the foliation.
        /// \param edgeId if of a LevelSetEdge of the graph.
        /// \param condNC, condLJ numerical constraints and locked joints that define the foliated manifold
        /// \param paramNC, paramPassiveJoints, paramLJ numerical constraints and locked joints that parametrize the foliation
        /// \note If passiveDofsNames is a shorter list than constraintNames, passiveDofsNames is extended with an empty string,
        ///       which corresponds to an empty vector of passive dofs.
        void setLevelSetFoliation (in long edgeId, in Names_t condNC, in Names_t condLJ, in Names_t paramNC, in Names_t paramPassiveJoints, in Names_t paramLJ)
          raises (Error);

        /// Set the numerical constraints of a component.
        /// \param graphComponentId ID of the component.
        /// \param constraintNames is an array of names of constraints in the ProblemSolver map.
        /// \param passiveDofsNames array of names of vector of passive dofs in the ProblemSolver map.
        /// \note If passiveDofsNames is a shorter list than constraintNames, passiveDofsNames is extended with an empty string,
        ///       which corresponds to an empty vector of passive dofs.
        void setNumericalConstraints (in long graphComponentId, in Names_t constraintNames, in Names_t passiveDofsNames)
          raises (Error);

        /// Set the numerical constraints for path of a node.
        /// \param nodeId ID of the node.
        /// \param constraintNames is an array of names of constraints in the ProblemSolver map.
        /// \param passiveDofsNames array of names of vector of passive dofs in the ProblemSolver map.
        /// \note If passiveDofsNames is a shorter list than constraintNames, passiveDofsNames is extended with an empty string,
        ///       which corresponds to an empty vector of passive dofs.
        void setNumericalConstraintsForPath (in long nodeId, in Names_t constraintNames, in Names_t passiveDofsNames)
          raises (Error);

        /// Set the LockedDof constraints of a component.
        /// \param graphComponentId ID of the component.
        /// \param constraintNames is an array of names of constraints in the ProblemSolver map.
        void setLockedDofConstraints (in long graphComponentId, in Names_t constraintNames)
          raises (Error);

        /// Get the node corresponding to the state of the configuration.
        /// \param dofArray the configuration.
        /// \return the ID corresponding to the node.
        void getNode (in floatSeq dofArray, out ID nodeId)
          raises (Error);

	/// Get error of a config with respect to a node constraint
	///
	/// \param config Configuration,
	/// \param nodeId id of the node.
	/// \retval error the error of the node constraint for the
	///        configuration
	/// \return whether the configuration belongs to the node.
	/// Call method core::ConstraintSet::isSatisfied for the node
	/// constraints.
	boolean getConfigErrorForNode (in floatSeq config, in ID nodeId,
				       out floatSeq errorVector) raises (Error);

	/// Print set of constraints relative to a node in a string
	///
	/// \param config Configuration,
	/// \param nodeId id of the node.
	/// \return string displaying constraints
	void displayNodeConstraints (in ID nodeId, out string constraints)
	  raises (Error);

	/// Print set of constraints relative to an edge in a string
	///
	/// \param config Configuration,
	/// \param edgeId id of the edge.
	/// \return string displaying constraints
	void displayEdgeConstraints (in ID edgeId, out string constraints)
	  raises (Error);

        void display (in string filename)
          raises (Error);

        void getHistogramValue (in ID edgeId, out floatSeq freq, out floatSeqSeq values)
          raises (Error);

        void setShort (in ID edgeId, in boolean isShort)
          raises (Error);

        intSeq autoBuild (in string graphName,
            in Names_t grippers, in Names_t objects,
            in Namess_t handlesPerObject, in Namess_t shapesPreObject,
	    in Names_t envNames, in Rules rulesList)
          raises (Error);

        void setWeight (in ID edgeID, in long weight)
          raises (Error);

        long getWeight (in ID edgeID)
          raises (Error);
      }; // interface Graph
    }; // module manipulation
  }; // module corbaserver
}; // module hpp

#endif // HPP_MANIPULATION_CORBA_GRAPH_IDL
